{"version":3,"sources":["webpack:///./src/templates/category.jsx","webpack:///./src/components/AuthorThumbnail/AuthorThumbnail.jsx","webpack:///./src/components/PostListing/PostListing.jsx"],"names":["CategoryTemplate","render","category","this","props","pageContext","postEdges","data","allMarkdownRemark","edges","authorsEdges","authors","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_5__","location","className","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","title","config","siteTitle","_components_PostListing_PostListing__WEBPACK_IMPORTED_MODULE_3__","postAuthors","React","Component","pageQuery","AuthorThumbnail","_this$props","avatar","name","react_default","src","alt","data-pin-nopin","PostListing","authorEdges","postList","map","postEdge","path","node","fields","slug","tags","frontmatter","cover","date","author","AuthorModel","getAuthor","SiteConfig","blogAuthorId","excerpt","timeToRead","post","post_class","PostFormatting","key","PostHeader","gatsby_browser_entry","to","components_AuthorThumbnail_AuthorThumbnail","image","AuthorLink","url","uid","PostTags","prefix","PostDate"],"mappings":"mOAOMA,4FACJC,kBACE,IAAMC,EAAWC,KAAKC,MAAMC,YAAYH,SAClCI,EAAYH,KAAKC,MAAMG,KAAKC,kBAAkBC,MAC9CC,EAAeP,KAAKC,MAAMG,KAAKI,QAAQF,MAC7C,OACEG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,SAAUb,KAAKC,MAAMY,UAC3BJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,sBACbL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CACEM,MAAK,sBAAwBjB,EAAxB,OAAuCkB,IAAOC,YAErDT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAahB,UAAWA,EAAWiB,YAAab,UAX3Bc,IAAMC,WAmBxBC,EAAS,aAuCP1B,6IC7CA2B,oGAhBb1B,kBAAS,IAAA2B,EACkBzB,KAAKC,MAAtByB,EADDD,EACCC,OAAQC,EADTF,EACSE,KAChB,OAAID,GAAUC,EAEVC,EAAAlB,EAAAC,cAAA,OACEG,UAAU,eACVe,IAAKH,EACLI,IAAKH,EACLI,iBAAe,SAId,SAbmBV,IAAMC,oFCyB9BU,oGACJlC,kBACE,IAlBiBK,EAAW8B,EAkBtBC,GAlBW/B,EAkBYH,KAAKC,MAAME,UAlBZ8B,EAkBuBjC,KAAKC,MAAMmB,YAjBhEjB,EAAUgC,IAAI,SAAAC,GAAQ,MAAK,CACzBC,KAAMD,EAASE,KAAKC,OAAOC,KAC3BC,KAAML,EAASE,KAAKI,YAAYD,KAChCE,MAAOP,EAASE,KAAKI,YAAYC,MACjC3B,MAAOoB,EAASE,KAAKI,YAAY1B,MACjC4B,KAAMR,EAASE,KAAKI,YAAYE,KAChCC,OAAQC,IAAYC,UAClBd,EACAG,EAASE,KAAKI,YAAYG,OAC1BG,IAAWC,cAEbC,QAASd,EAASE,KAAKY,QACvBC,WAAYf,EAASE,KAAKa,eAO1B,OACEvB,EAAAlB,EAAAC,cAAA,WAEGuB,EAASC,IAAI,SAAAiB,GAAQ,IACZpC,EAA6CoC,EAA7CpC,MAAOqB,EAAsCe,EAAtCf,KAAMa,EAAgCE,EAAhCF,QAASL,EAAuBO,EAAvBP,OAAQJ,EAAeW,EAAfX,KAAMG,EAASQ,EAATR,KACtC9B,EAAYsC,EAAKC,WAAaD,EAAKC,WAAa,OAEtD,OACEzB,EAAAlB,EAAAC,cAAC2C,EAAA,EAAD,CAAgBxC,UAAWA,EAAWyC,IAAKvC,GACzCY,EAAAlB,EAAAC,cAAC6C,EAAA,EAAD,KACE5B,EAAAlB,EAAAC,cAAA,MAAIG,UAAU,cACZc,EAAAlB,EAAAC,cAAC8C,EAAA,KAAD,CAAMC,GAAIrB,GAAOrB,KAGrBY,EAAAlB,EAAAC,cAAA,WAASG,UAAU,gBAEjBc,EAAAlB,EAAAC,cAAA,SACGuC,EAAS,IACVtB,EAAAlB,EAAAC,cAAC8C,EAAA,KAAD,CAAM3C,UAAU,YAAY4C,GAAIrB,GAAhC,OAKJT,EAAAlB,EAAAC,cAAA,UAAQG,UAAU,aAChBc,EAAAlB,EAAAC,cAACgD,EAAD,CAAiBjC,OAAQmB,EAAOe,MAAOjC,KAAMkB,EAAOlB,OACpDC,EAAAlB,EAAAC,cAACkD,EAAA,EAAD,CAAYC,IAAG,WAAajB,EAAOkB,IAAOpC,KAAMkB,EAAOlB,OACvDC,EAAAlB,EAAAC,cAACqD,EAAA,EAAD,CAAUC,OAAO,OAAOxB,KAAMA,IAC9Bb,EAAAlB,EAAAC,cAACuD,EAAA,EAAD,CAAUtB,KAAMA,aA/BNvB,IAAMC,YAyCjBU","file":"component---src-templates-category-jsx-306b97e7bf07fb4b94ba.js","sourcesContent":["import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport Helmet from \"react-helmet\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport config from \"../../data/SiteConfig\";\nimport Layout from \"../components/layout\";\n\nclass CategoryTemplate extends React.Component {\n  render() {\n    const category = this.props.pageContext.category;\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n    const authorsEdges = this.props.data.authors.edges;\n    return (\n      <Layout location={this.props.location}>\n        <div className=\"category-container\">\n          <Helmet\n            title={`Posts in category \"${category}\" | ${config.siteTitle}`}\n          />\n          <PostListing postEdges={postEdges} postAuthors={authorsEdges} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { eq: $category } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n    # authors\n    authors: allAuthorsJson {\n      edges {\n        node {\n          uid\n          name\n          image\n          url\n          bio\n        }\n      }\n    }\n  }\n`;\n\nexport default CategoryTemplate;\n","import React from \"react\";\nimport \"./AuthorThumbnail.css\";\n\nclass AuthorThumbnail extends React.Component {\n  render() {\n    const { avatar, name } = this.props;\n    if (avatar && name) {\n      return (\n        <img\n          className=\"author-thumb\"\n          src={avatar}\n          alt={name}\n          data-pin-nopin=\"true\"\n        />\n      );\n    }\n    return null;\n  }\n}\n\nexport default AuthorThumbnail;\n","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport AuthorThumbnail from \"../AuthorThumbnail/AuthorThumbnail\";\nimport PostTags from \"../PostTags/PostTags\";\nimport SiteConfig from \"../../../data/SiteConfig\";\nimport AuthorLink from \"../AuthorLink/AuthorLink\";\nimport PostFormatting from \"../../components/PostFormatting/PostFormatting\";\nimport PostHeader from \"../../components/PostHeader/PostHeader\";\nimport PostDate from \"../PostDate/PostDate\";\nimport AuthorModel from \"../../models/author-model\";\nimport \"./PostListing.css\";\n\nconst getPostList = (postEdges, authorEdges) =>\n  postEdges.map(postEdge => ({\n    path: postEdge.node.fields.slug,\n    tags: postEdge.node.frontmatter.tags,\n    cover: postEdge.node.frontmatter.cover,\n    title: postEdge.node.frontmatter.title,\n    date: postEdge.node.frontmatter.date,\n    author: AuthorModel.getAuthor(\n      authorEdges,\n      postEdge.node.frontmatter.author,\n      SiteConfig.blogAuthorId\n    ),\n    excerpt: postEdge.node.excerpt,\n    timeToRead: postEdge.node.timeToRead\n  }));\n\nclass PostListing extends React.Component {\n  render() {\n    const postList = getPostList(this.props.postEdges, this.props.postAuthors);\n\n    return (\n      <div>\n        {/* This is the post loop - each post will be output using this markup */}\n        {postList.map(post => {\n          const { title, path, excerpt, author, tags, date } = post;\n          const className = post.post_class ? post.post_class : \"post\";\n\n          return (\n            <PostFormatting className={className} key={title}>\n              <PostHeader>\n                <h2 className=\"post-title\">\n                  <Link to={path}>{title}</Link>\n                </h2>\n              </PostHeader>\n              <section className=\"post-excerpt\">\n                {/* TODO limit excerpt to 26 words */}\n                <p>\n                  {excerpt}{\" \"}\n                  <Link className=\"read-more\" to={path}>\n                    &raquo;\n                  </Link>\n                </p>\n              </section>\n              <footer className=\"post-meta\">\n                <AuthorThumbnail avatar={author.image} name={author.name} />\n                <AuthorLink url={`/author/${author.uid}`} name={author.name} />\n                <PostTags prefix=\" on \" tags={tags} />\n                <PostDate date={date} />\n              </footer>\n            </PostFormatting>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n"],"sourceRoot":""}